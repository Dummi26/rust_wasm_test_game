[package]
name = "rust_wasm_test_game"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[profile.release]
lto = true

[features]
#default = ["wee_alloc"]

[dependencies]
wasm-bindgen = "0.2.45"
js-sys = "0.3.22"
lazy_static = "1.3"
euclid = "0.19"
wasm-timer = "0.2.5"
image = "0.24.2"
gloo = "0.8.0"


# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.
#wee_alloc = { version = "0.4.2", optional = true }

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "0.3.55"
features = [
    "console",
    "Document",
    "Element",
    "HtmlCanvasElement",
    "KeyboardEvent",
    "MouseEvent",
    "Window",
# rendering contexts - you only need one of those, depending on what you uncommend in lib.rs
#    "WebGl2RenderingContext",
    "CanvasRenderingContext2d", "ImageData",
    "Performance",
    "WebGlBuffer",
    "WebGlProgram",
    "WebGlShader",
    "WebGlUniformLocation",
]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.
[target."cfg(debug_assertions)".dependencies]
console_error_panic_hook = "0.1.5"

# These crates are used for running unit tests.
[dev-dependencies]
wasm-bindgen-test = "0.2.45"
futures = "0.1.27"
js-sys = "0.3.22"
wasm-bindgen-futures = "0.3.22"